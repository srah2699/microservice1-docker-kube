"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = require("winston");
const milieu_1 = __importDefault(require("@ct-shipping/milieu"));
const maskit_1 = __importDefault(require("@ct-shipping/maskit"));
const { combine, errors } = winston_1.format;
class Logger {
    constructor() {
        this.winstonLogger = (0, winston_1.createLogger)({
            format: combine(winston_1.format.timestamp(), errors({ stack: true }), winston_1.format.printf((info) => {
                const { level, timestamp, message, stack } = info;
                const logFormat = {
                    level,
                    timestamp,
                    message,
                    stack,
                    traceid: this.getTraceID(),
                };
                return this.enableMasking
                    ? JSON.stringify(maskit_1.default.mask(logFormat))
                    : JSON.stringify(logFormat);
            })),
            transports: [new winston_1.transports.Console()],
        });
        this.contextKey = undefined;
        this.enableMasking = false;
    }
    getTraceID() {
        return milieu_1.default.get(this.contextKey);
    }
    registerContext(key) {
        this.contextKey = key;
    }
    registerMasker(maskingOptions) {
        const { enableMasking, sensitiveKeys } = maskingOptions;
        if (enableMasking === true) {
            this.enableMasking = true;
        }
        if (sensitiveKeys) {
            maskit_1.default.addSensitiveKeys(sensitiveKeys);
        }
    }
    info(message) {
        this.winstonLogger.info(message);
    }
    error(message) {
        this.winstonLogger.error(message);
    }
    debug(message) {
        this.winstonLogger.debug(message);
    }
    warn(message) {
        this.winstonLogger.warn(message);
    }
}
const journal = new Logger();
exports.default = journal;
