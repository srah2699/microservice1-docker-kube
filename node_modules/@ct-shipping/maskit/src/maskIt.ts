import traverse from 'traverse';
import { klona } from 'klona/full';

class MaskIt {
  private sensitiveKeys: any[];

  constructor() {
    this.sensitiveKeys = [
      /passw(or)?d/i,
      /^pw$/,
      /^pass$/i,
      /secret/i,
      /token/i,
      /api[-._]?key/i,
    ];
  }

  public isSensitiveKey(keyStr: any): boolean {
    if (keyStr) {
      return this.sensitiveKeys.some((regex) => regex.test(keyStr));
    }
    return false;
  }

  private maskObject(obj: any) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const that = this;
    traverse(obj).forEach(function redactor() {
      if (that.isSensitiveKey(this.key)) {
        this.update('[MASKED]');
      }
    });
  }

  public mask(obj: any) {
    const copy = klona(obj);
    this.maskObject(copy);
    return copy;
  }

  public addSensitiveKeys(obj: RegExp[]): void {
    this.sensitiveKeys.push(...obj);
  }
}

const maskit = new MaskIt();
export default maskit;
